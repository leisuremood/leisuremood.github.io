#+options: toc:1
#+begin_export md
---
layout: post
title: "gcc编译kernel链接器脚本ld-安装Steam"
date: 2019-08-10
tags:
    - it
---
#+end_export
* 升级gcc版本9.1.0

[[https://mamicode.com/info-detail-2688872.html]]

wget [[https://ftp.gnu.org/gnu/gcc/gcc-9.1.0/gcc-9.1.0.tar.gz]]

#+begin_src shell
tar -xzvf gcc-9.1.0.tar.gz

cd gcc-9.1.0

./contrib/download_prerequisiles

mkdir ../build-gcc

cd ../build-gcc/

../gcc-9.1.0/configure  --enable-bootstrap --enable-languages=c,c++ --prefix=/tools --enable-gnu-unique-object --enable-linker-build-id --with-gcc-major-version-only --with-linker-hash-style=gnu --enable-plugin --enable-initfini-array --with-isl --enable-libmpx --enable-offload-targets=nvptx-none --without-cuda-driver --enable-gnu-indirect-function --enable-cet --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux

# 这个不行啊。

../gcc-9.1.0/configure
-enable-checking=release -prefix=/tools -enable-languages=c,c++ -disable-multilib
#+end_src

[[https://blog.csdn.net/sonicling/article/details/6706152]]

而GCC的词法分析是手工构造的，实现在libcpp/lex.c文件中，其中最重要的那个函数是_cpp_lex_direct，他反应了GCC词法分析器的核心结构。

** 例如修改c语言中的=赋值为←
https://www.mysmth.net/nForum/#!article/CPlusPlus/407534
#+begin_src c
  int main(int argc, char **argv)  
{  
     int i ← 0;
     unsigned char *str ← "1234中";
  
     while(str[i])
     {
         printf("%02x ",str[i]);
         i++;
     }
     printf("\n");
     if ( 1 ?= 1)
         printf("%s\n", str);
     return 0;  
} 
#+end_src

#+begin_quote
$ diff -u lex.c.old  lex.c
--- lex.c.old    2019-08-10 13:27:04.354956122 +0800
+++ lex.c    2019-08-10 13:57:50.698128173 +0800
@@ -3099,11 +3099,18 @@
  
      case '*': IF_NEXT_IS ('=', CPP_MULT_EQ, CPP_MULT); break;
      case '=': IF_NEXT_IS ('=', CPP_EQ_EQ, CPP_EQ); break;
+    case 0xE2:
+    if (*buffer->cur == 0x86 && buffer->cur[1] == 0x90)
+          buffer->cur+= 2, result->type = CPP_EQ;
+        else
+          cpp_error (pfile, CPP_DL_WARNING, "not support");      
+    break;
      case '!': IF_NEXT_IS ('=', CPP_NOT_EQ, CPP_NOT); break;
      case '^': IF_NEXT_IS ('=', CPP_XOR_EQ, CPP_XOR); break;
      case '#': IF_NEXT_IS ('#', CPP_PASTE, CPP_HASH); result->val.token_no = 0; break;
  
-    case '?': result->type = CPP_QUERY; break;
+    //case '?': result->type = CPP_QUERY; break;
+    case '?': IF_NEXT_IS ('=', CPP_EQ_EQ, CPP_QUERY); break;
      case '~': result->type = CPP_COMPL; break;
      case ',': result->type = CPP_COMMA; break;
      case '(': result->type = CPP_OPEN_PAREN; break;
  
#+end_quote

** 使用?=代替if判断中的==

#+begin_src c
#include <stdio.h>
int main(int argc, char **argv)  
{  
     int i = 0;
     unsigned char *str = "1234中";
  
     while(str[i])
     {
         printf("%02x ",str[i]);
         i++;
     }
     printf("\n");
     if ( 1 ?= 1)
         printf("%s\n", str);
     return 0;  
}   
#+end_src

#+begin_quote
$ diff -u lex.c.old lex.c
--- lex.c.old    2019-08-10 13:27:04.354956122 +0800
+++ lex.c    2019-08-10 13:28:31.970443943 +0800
@@ -3103,7 +3103,8 @@
      case '^': IF_NEXT_IS ('=', CPP_XOR_EQ, CPP_XOR); break;
      case '#': IF_NEXT_IS ('#', CPP_PASTE, CPP_HASH); result->val.token_no = 0; break;
  
-    case '?': result->type = CPP_QUERY; break;
+    //case '?': result->type = CPP_QUERY; break;
+    case '?': IF_NEXT_IS ('=', CPP_EQ_EQ, CPP_QUERY); break;
      case '~': result->type = CPP_COMPL; break;
      case ',': result->type = CPP_COMMA; break;
      case '(': result->type = CPP_OPEN_PAREN; break;
#+end_quote

* 编译kernel
[[https://www.cnblogs.com/qccz123456/p/11009502.html][How to compile and install Linux Kernel 5.1.2 from source code]]

下载 linux-5.4.1

#+begin_quote

cp /boot/config-5.3.13-300.fc31.x86_64 linux-5.4.1/.config

make xconfig  或者 (defconfig, oldconfig, config, gconfig)

make -j 4

sudo make modules_install

sudo make install

sudo grubby --set-default /boot/vmlinuz-5.1.2   #安装自己定义的名称来设置

# 生成tag

gtags -v

htags -DfFnva -t 'kernel 5.4.1 Ref'

htags-server   # 默认https://127.0.0.1:8000
#+end_quote

* ld链接器脚本内的locationcounter
https://www.newsmth.net/nForum/#!article/KernelTech/74604

. 是指 memory layout，表示当前偏移量。

对于reloadeble， 。 代表了相邻的session和当前位置的偏移。0-offset

https://forum.osdev.org/viewtopic.php?f=1&t=32840

#+begin_quote
SECTIONS
{
        /* Relative address by itself results in relative address.
           '.' at this point holds a negative offset to the start of custom_section,
           which is yet to be determined by a future assignment to '.'
           The absolute address would be 0, although if this is not the last
           linker invocation, future invocations move this symbol along with the section. */
        A_outside_current = .;
        . = 0x111000;
        /* Relative address by itself results in relative address. Still negative offset. */
        B_outside_current = .;
        /* Numbers treated as absolute addresses outside of sections.
           Absolute address by itself results in absolute address.
           This changes if LD_FEATURE ("SANE_EXPR") is requested at the start of the script. */
        C_outside_direct = 0x111000;
        /* Numbers treated as absolute addresses outside of sections.
           Arithmetic between absolute address and relative address, converts the
           relative address to absolute one and produces absolute address as well. */
        D_outside_current_doubled = . * 2;
        . = 0x111100;
        custom_section : {
                . = 0x11;
                /* Relative address by itself results in relative address. 0 offset. */
                E_inside_current = .;
                F_inside_direct = 0x11;
                /* Numbers treated as numbers inside of sections.
                   Arithmetic between number and relative address uses the offset of the
                   relative address and produces relative address. */
                G_inside_current_doubled = . * 2;
                /* The following are fairly clear, since they request conversion of the
                   address type explicitly. */
                H_inside_absolute_current = ABSOLUTE(.);
                I_inside_absolute_current_doubled = ABSOLUTE(.) * 2;
                J_inside_absolute_E = ABSOLUTE(E_inside_current);
                K_inside_absolute_H = ABSOLUTE(H_inside_absolute_current);
                /* Absolute addresses are treated as numbers within sections.
                   Numbers produce section relative symbols in assignments. */
                L_inside_H = H_inside_absolute_current;
                *(.text);
                . = 0x1000;
        }
        /* Arithmetic between relative addresses in the same section
           produces absolute address, but does not convert the operands.
           That is, it operates on the offset parts of the addresses. */
        M_outside_current_squared = . * .;
        /* Relative address in the same section produces relative address. */
        N_outside_E = E_inside_current;
        /* Absolute address produces absolute address as expected. */
        O_outside_H = H_inside_absolute_current;
        . = 0x1111100;
        /* Relative address to the following section. 0 offset. */
        P_in_another_section = .;
        another_section : {
                /* This is a surprise, although it is by the rules.
                   Mixing relative addresses from different sections converts them to their
                   absolute address value first, but produces a relative address in the end. */
                Q_mixed_F_P = F_inside_direct * P_in_another_section;
                LONG(0)
        }
        . = 0x1111111;
        /* We are still in the previous section right now.
           Although if orphan sections are not discarded,
           we would be in one of those orphan sections instead. */
        R_in_same_section = .;
        /* Relative address in another section by itself is still
           a relative address in that section, no matter where we use it. */
        S_in_first_section = E_inside_current;
        /DISCARD/ : { *(*); }
}
#+end_quote
The results for relocatable output.
#+begin_quote
ffffffffffeeef00        1       A_outside_current
ffffffffffffff00        1       B_outside_current
0000000000111000        ABS     C_outside_direct
0000000000222000        ABS     D_outside_current_doubled
0000000000000011        1       E_inside_current
0000000000000011        1       F_inside_direct
0000000000000022        1       G_inside_current_doubled
0000000000111111        ABS     H_inside_absolute_current
0000000000222222        ABS     I_inside_absolute_current_doubled
0000000000111111        ABS     J_inside_absolute_E
0000000000111111        ABS     K_inside_absolute_H
0000000000111111        1       L_inside_H
0000000001000000        ABS     M_outside_current_squared
0000000000000011        1       N_outside_E
0000000000111111        ABS     O_outside_H
0000000000000000        2       P_in_another_section
0000123455432100        2       Q_mixed_F_P
0000000000000011        2       R_in_same_section
0000000000000011        1       S_in_first_section
#+end_quote

按照作者的解释  R_in_same_section是在 another_section，偏移量. = 0x1111100;

后来又赋值  . = 0x1111111;， 所以R_in_same_section记录相对偏移量 = 0x1111111 - 0x1111100 = 0x0000011

#+begin_src asm
-----test.s---------
section .text
        .globl _start
_start:
        movq $1, %rax
        movq $0, %rbx
        int $0x80

------test.lds------
SECTIONS
{
        . = 0x10;
        label_1 = .;
        custom_section : {
                . = 0x20;
                label_2 = . ;
                label_3 = ABSOLUTE(.) ;
                *(.text) ;
        }
}	  
#+end_src

#+begin_quote
gcc -c test.s
ld test.o -T test.lds -o test
# readelf -s test 和 nm test 输出类似。

label_2 =0x30,  (0x20+0x10)
label_4=0x50,   (0x20*2 +0x10)
#+end_quote

可见ld之后test中 label_2, label_4从relative offset转变成了virtual address。

* linux安装Steam
[[https://negativo17.org/steam/]]

#+begin_quote
  dnf config-manager --add-repo=https://negativo17.org/repos/fedora-steam.repo
#+end_quote

To make "Big Picture" work in Fedora or CentOS/RHEL, enable this SELinux
boolean as root:

#+begin_quote
  setsebool -P allow_execheap 1
#+end_quote

steam有linux版的免费游戏暂时名单

#+begin_quote
Sunrider: First Arrival

Reversion - The Escape (1st Chapter)(有简体中文版） Floating Point

World of Guns: Gun Disassembly（枪支世界:枪械拆解）
Toribash Fistful of Frags（西部牛仔半条命2，必玩）
You Have to Win the Game The Plan Cannons Lasers Rockets 8BitMMO No More Room in Hell地狱已满（联机杀僵尸，必玩）
Champions of Regnum Star Conflict星际争端（俄国出太空机战游戏，要有一定配置才能玩）
Dwarfs - F2P
TF2（不解释，必玩）
Dota2（不解释,必玩）
Narcissu 1st & 2nd（水仙1\2,神作必玩）             
#+end_quote

* linux安装英雄无敌3

[[https://www.cnblogs.com/findumars/p/4733534.html][魔法门之英雄无敌3-死亡阴影英文版光盘 [[https://pan.baidu.com/share/link?uk=587557272&shareid=1666116402]]

Heroes of Might and Magic III-The Shad
[[https://pan.baidu.com/share/link?shareid=264692&uk=3390017774]]

[[https://www.cnblogs.com/CoderTian/p/6655568.html][英雄无敌3地图的中英文对照      ]]

[[https://www.cnblogs.com/findumars/p/4733534.html][ 英雄无敌3死亡阴影怎么知道地图对应的英文名称]]

[[https://www.cnblogs.com/findumars/p/6275440.html][英雄无敌3开源引擎vcmi的编译安装]]

** How to build VCMI (Linux)  [[https://wiki.vcmi.eu/How_to_build_VCMI_(Linux)]]

#+begin_src shell
  sudo yum install cmake gcc-c++ SDL2-devel SDL2_image-devel
  SDL2_ttf-devel SDL2_mixer-devel boost boost-devel boost-filesystem
  boost-system boost-thread boost-program-options boost-locale zlib-devel
  ffmpeg-devel ffmpeg-libs qt5-qtbase-devel

  mkdir build && cd build cmake ../vcmi

  cmake --build . -- -j2

  make install
  # 编译的库放在/usr/local/lib, 所以需要 加库路径：

  cat > /etc/ld.so.conf.d/vcmi-x86_64.conf <<EOF

    /usr/local/lib64/vcmi /usr/local/lib

    EOF

  ldconfig

  vcmiclient -v

  sudo ln -sf /mnt/lenovo/GAME/Heroes3/Data .

  sudo ln -sf /mnt/lenovo/GAME/Heroes3/Mp3 . sudo ln
  -sf /mnt/lenovo/GAME/Heroes3/Maps .
  #+end_src

** FFmpeg在Linux下编译

Fedora29 没有 ffmpeg-devel ffmpeg-libs， 用源码编译：

Get the packages  [[https://ffmpeg.org/download.html#get-sources]]

#+begin_quote
  git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg

  ./configure
  --prefix=host --enable-shared --disable-static --disable-doc

  ./configure --enable-gpl --disable-optimizations --enable-shared --enable-static --enable-ffplay --disable-x86asm

  make

  make install
#+end_quote

            
