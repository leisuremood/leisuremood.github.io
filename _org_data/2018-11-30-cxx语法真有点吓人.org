#+OPTIONS: toc:1 ^:nil
#+begin_export md
---
layout: post
title: "cxx语法真有点吓人"
date: 2018-11-30
tags: 
    - it
---
#+end_export

* c++11语法甜点

 [[https://www.cnblogs.com/cpper-kaixuan/]]
C++ 11中引入了许多简化编程工作的语法上的新特性，我们暂且美其名曰“语法甜点”。下面一一进行介绍。
** 语法甜点 1：序列for循环
 
序列for循环是一种简化的for循环，可用于遍历一组序列，包括各种容器、string、数组、初始化列表以及由begin和end函数定义的序列。示例代码如下：

#+begin_src C
 vector<int> vctTemp{1, 2, 3};
 for (auto a : vctTemp)
 {
     cout << a << endl;
 }
#+end_src

** 语法甜点 2：委托构造函数
  在引入C++ 11之前，如果某个类有多个重载的构造函数，且这些构造函数中有一些共同的初始化逻辑，通常都需要再编写一个带参数的初始化函数，然后在这些构造函数中调用这个初始化函数。在C++ 11中，再也不用这么麻烦了。我们可以实现一个最基础的构造函数，其他构造函数都调用这个构造函数。示例代码如下：

#+begin_src C
 class CPerson
 {
 public:
  CPerson() : CPerson(0, "") { NULL; }
  CPerson(int nAge) : CPerson(nAge, "") { NULL; }
  CPerson(int nAge, const string &strName)
  {
   stringstream ss;
   ss << strName << "is " << nAge << "years old.";
   m_strInfo = ss.str();
  }
 
 private:
  string m_strInfo;
 };
#+end_src

** 语法甜点 3：统一的初始化语法
  在引入C++ 11之前，有各种不同的初始化语法。在C++ 11中，仍可以使用这些初始化语法，但也可以选择使用新引入的统一的初始化语法。统一的初始化语法用一对大括号{}表示，使用{}初始化语法还可有效地避免窄转换。示例代码如下：

#+begin_src C
 int a{5};
  char c{'X'};
  int p[5] = {1, 2,3, 4, 5};
  vector<int> vctTemp{1, 2, 3};
  CPerson person{10, "Mike"};
   int b = 5.3;                     // b赋值成5，发生了窄转换
   int d{5.3};                      // 会提示编译错误，避免了窄转换
#+end_src

** 语法甜点 4：nullptr
  nullptr是C++ 11中新加的一个关键字，用于标识空指针。引入nullptr后，可以解决某些函数重载时的二义性问题。示例代码如下：

#+begin_src C
 void F(int a)
 {
  cout << a << endl;
 }
 
 void F(char *p)
 {
  assert(p != NULL);
 
  cout << p << endl;
 }
 
 int main(int argc, _TCHAR* argv[])
 {
  int *p = nullptr;
  int *q = NULL;
  bool bEqual = (p == q);  // 两个指针值是相等的，bEqual为true
  int a = nullptr;   // 编译失败，nullptr不是转换为int
 
  F(0);          // 在C++ 98中编译失败，有二义性；在C++ 11中调用F(int)
  F(nullptr);    // 调用F(char *)
 
  getchar();
  return 0;
 }
#+end_src


** 语法甜点 5：成员变量初始化
 
与Java和C#中的用法一样，可以对成员变量进行就地初始化。示例代码如下：

#+begin_src C
 class CPerson
 {
 private:
  int m_nAge = 10;
  string m_strName = "Mike";
 };
#+end_src

** 语法甜点 6：默认或禁用函数
 
当我们定义了自己的带参数的构造函数时，编译器将不再生成默认的构造函数，如果此时想使用默认的构造函数，则必须显式地声明并定义不带参数的构造函数。在C++ 11中，我们可以使用default关键字来表明我们希望使用默认的构造函数。类似的，当我们不想外部使用编译器自动生成的构造函数或赋值函数时，我们一般需要将其声明成protected或private的。在C++ 11中，我们可以使用delete关键字来表明我们不希望编译器生成默认的构造函数或赋值函数。示例代码如下：

#+begin_src C
 class CPerson
 {
 public:
  CPerson() = default;
  CPerson(const CPerson &person) = delete;
 };
#+end_src

** 语法甜点 7：继承的构造函数
 
当一个派生类的某个函数隐藏了基类中的某个同名函数时，如果我们想在派生类中导出基类中的这个同名函数，可以通过using Base::Func的方式将基类中的这个同名函数引入到派生类的作用域内。当该方法只对普通成员函数有效，不能用于构造函数。在C++ 11中，如果派生类认为基类的构造函数已经足够，则也可以使用using Base::Base的方式将基类的构造函数引入到派生类的作用域内。但需要注意的是，此时派生类中的成员变量并没有进行初始化，所以应当对这些成员变量进行就地初始化。示例代码如下：

#+begin_src C
 class CBase
 {
 };
 
 class CDerived : public CBase
 {
 public:
  using CBase::CBase;
  CDerived(int nData) : m_nData(nData) { NULL; }
 
 private:
  int m_nData = 10;
 };
#+end_src

** 语法甜点 8：模板右边双括号
   在C++ 98中，vector<vector<int>> vctTemp是一个非法的表达式，编译器会认为右边的>>是一个移位操作符，因此必须修改为vector<vector<int>> vctTemp，即在右边的两个>中间添加一个空格。在C++ 11中，这将不再是一个问题，编译器将能够识别出右边的双括号是两个模板参数列表的结尾。

** 语法甜点 9：static_assert  
静态断言static_assert由一个常量表达式和一个字符串构成。在编译期间，将计算常量表达式的值，如果为false，字符串将作为错误信息输出。示例代码如下：

#+begin_src C
 char a = 10;
 static_assert(sizeof(a)==4, "a is not an integer.");
#+end_src

** 语法甜点 10：初始化列表
  在引入C++ 11之前，只有数组能使用初始化列表。在C++ 11中，vector、list等各种容器以及string都可以使用初始化列表了。初始化列表对应的类为initializer_list，vector、list等各种容器以及string之所以可以使用初始化列表，是因为它们重载了参数类型为initializer_list的构造函数（称为初始化列表构造函数）和赋值函数（称为初始化列表赋值函数）。下面是一些使用初始化列表的例子。
#+begin_src C
  void Print(const initializer_list<int> &ilData)
  {
    for (auto a : ilData)
      {
	cout << a << endl;
      }
  }

  int main(int argc, _TCHAR* argv[])
  {
    vector<int> vctNum = {1, 2, 3, 4, 5};
    map<string, string> mapID2Name = {
      {"92001", "Jack"},
      {"92002", "Mike"}
    };
    string strText{"hello world"};
    Print({});
    Print({1, 2});
    Print({1, 2, 3, 4, 5});

    getchar();
    return 0;
  }
#+end_src

* C++14的return type deduction
https://www.newsmth.net/nForum/#!article/CPlusPlus/374960

若干年前实现了一个 C++ 序列化库，以前一直纠结于一种优化无法（自动）实现： 

#+begin_src C
struct A { int a1, a2; }; 

struct B { int b1, b2; }; 

struct C { A ca; B cb; }; 

struct D { std::set d; }; 

DATA_IO_LOAD_SAVE_E(A, &a1 &a2) // 序列化 A 的 a1, a2 成员，下同 

DATA_IO_LOAD_SAVE_E(B, &b1 &b2) 

DATA_IO_LOAD_SAVE_E(C, &ca &cb) 

DATA_IO_LOAD_SAVE_E(D, &d)      // stl 容器也可以序列化 
#+end_src

如果使用 NativeDataInput/Output, 只能自动推断出 A, B 可以直接 memcpy，无法推断出 C 也可以 memcpy，当然，任何情况下 D 肯定都是 无法 memcpy 的 现在有了 return type deduction, C memcpy 的问题就解决了 

参考链接： https://www.nfabo.cn/p/?p=65 

递归实现推导的. &a1 &a2 这样的表达式只能出现在 成员函数 内部，从而只有 return type deduction 才能
推导出相应的 type traits，DATA_IO_LOAD_SAVE_E 宏定义中有类似这样的代码：
  
#+begin_src C
auto DeduceMemCpyTrait(AutoDeducer deducer) {
   // 这是一个成员函数
   // Members 就是 &a1 &a2 这样的表达式
   // AutoDeducer 重载 operator& 进行类型推导
   return deducer Members;
}
typedef decltype(DeduceMemCpyTrait(AutoDeducer()) MemCpyTrait; 
#+end_src

* c++真有点吓人
  
https://www.newsmth.net/nForum/#!article/CPlusPlus/403674

下面的英文是从教程里摘出来的。然后有点没看懂：make_unique 是cpp14引入的，  在这之前，下面叙述里的 foo 函数要怎么写才可以避免意外的内存泄露呢？   

#+begin_quote
If your compiler does not yet support make_unique() , you can   create your unique_ptr as follows. Note that Simple must be mentioned twice:   
  unique_ptr<Simple> mySimpleSmartPtr(new Simple());
Before C++17, you had to use make_unique() not only because you have to specify the type only once, but also because of safety reasons!
Consider the following   call to a function called foo() :     
foo(unique_ptr<Simple>(new Simple()), unique_ptr<Bar>(new Bar(data())));
If the constructor of Simple or Bar , or the data() function, throws an exception, depending on your compiler optimizations, it was very possible that either a Simple or a Bar object would be leaked. 
#+end_quote

按照后人的说法：

unique_ptr<T> t(new T())本身不危险

关键不在于一个对象产生的内存泄漏，c++不至于傻逼到ctor里面抛异常了连这个对象本身的内存都回收不了。这里的关键是传进去2个对象，当1个对象的ctor抛异常后能不能回收new另一个对象时候分配的内存。 
要点就是一旦new成功就立刻交给一个智能指针，这就是为啥要用make_unique

 
也就是说 A* p=new A(); 如果A()抛出异常的话，那么p=null. 即对象本身的内存回收了。

关键在于gcc 的优化，
#+begin_example
foo(unique_ptr<Simple>(new Simple()), unique_ptr<Bar>(new Bar(data()))); 
#+end_example

可以变成： 

new Simple()

new Bar(data())

unique_ptr<Simple>

unique_ptr<Bar>

只能说是悲剧的gcc，太害人了。

refer: https://blog.csdn.net/u011475134/article/details/76714243

refer: https://blog.csdn.net/Jxianxu/article/details/72859800?utm_source=blogxgwz0

要点就是一旦new成功就立刻交给一个智能指针，这就是为啥要用make_unique 对于make_unique处理不了的private ctor，就只能由factory method直接返回unique_ptr   全部代码： 

#+begin_src C
#include <memory>
#include <iostream>
using namespace std;
  
template <bool Exception>
class A {
  public:
   static unique_ptr<A> Create()  {
     unique_ptr<A> p(new A);
     return p;
   }
  
   void* operator new(size_t size) {
     void* p = malloc(size);
     cout << "allocate " << size << " bytes at " << p << endl;
     return p;
   }
  
   void operator delete(void* p) {
     cout << "free " << p << endl;
     free(p);
   }
  
  private:
   A() {
     if (Exception) {
       cout << "throw exception\n";
       throw 0;
     }
   }
  
   int date;
};
  
template <class First, class Second>
void Foo(unique_ptr<First> first, unique_ptr<Second> second) { }
  
int main() {
   try {
     auto p = A<true>::Create();
   } catch (...) {}
  
   try {
     Foo(A<true>::Create(), A<false>::Create());
   } catch (...) {}
  
   try {
     Foo(A<false>::Create(), A<true>::Create());
   } catch (...) {}
} 
#+end_src

智能指针之make_unique与make_shared
附录： https://blog.csdn.net/u011475134/article/details/76714243 

** make_unique的实现

std::make_shared是C++11的一部分，但是std::make_unique很可惜不是。它是在C++14里加入标准库的，但我们可以自己实现make_unique方法。

#+begin_src C

  // 支持普通指针
  template<class T,class... Args> inline
    typename enable_if<!is_array<T>::value,unique_ptr<T>>::type
    make_unique(Args&&... args){
    return unique_ptr<T>(new T(std::forward<Args>(args)...));
  }

  // 支持动态数组
  template<class T> inline
  typename enable_if<is_array<T>::value && extent<T>::value == 0, unique_ptr<T>>::type

    make_unique(size_t size){
    typedef typename remove_extent<T>::type U;
    return unique_ptr<T>(new U[size]());
  }

  // 过滤掉定长数组的情况
  template<class T,class... Args>
    typename enable_if<extent<T>::value != 0,void>::type
    make_unique(Args&&...) = delete;
#+end_src
** enable_if的作用

#+begin_src C
// Primary template.
/// Define a member typedef @c type only if a boolean constant is true.

template<bool, typename _Tp = void>

  struct enable_if

 { };

// Partial specialization for true.

template<typename _Tp>

  struct enable_if<true, _Tp>

 { typedef _Tp type; };
#+end_src
结合源码可知，当condition==true时，enable_if<condition,T>::type ≡ T，否则报错。

enable_if<!is_array<T>::value,unique_ptr<T>>::type的condition在T不是数组类型时为true

enable_if<is_array<T>::value && extent<T>::value == 0,unique_ptr<T>>::type的condition在T为数组类型且数组中元素个数为0时为true，由于对于非数组类型extent<U>::value也为0，语句is_array<T>::value是必要的

enable_if<extent<T>::value != 0,void>::type的condition在T类型中元素个数不为0时为true，即T为定长数组

** std::forward的作用

std::forward在这里的作用是实现参数的完美转发，具体见《move和forward源码分析[转]》。

** make函数的好处

1. 效率更高

shared_ptr需要维护引用计数的信息。如果你通过使用原始的new表达式分配对象，然后传递给shared_ptr（也就是使用shared_ptr的构造函数）的话，shared_ptr的实现没有办法选择，而只能单独的分配控制块：

如果选择使用make_shared的话，情况就会变成下面这样：

内存分配的动作，可以一次性完成。这减少了内存分配的次数，而内存分配是代价很高的操作。

2. 异常安全

看看下面的代码：

#+begin_src C
  void F(const hstd::shared_ptr<Lhs>& lhs, const std::shared_ptr<Rhs>& rhs)
  { /* ... */ }

  F(std::shared_ptr<Lhs>(new Lhs("foo")), std::shared_ptr<Rhs>(new Rhs("bar")));
#+end_src

C++是不保证参数求值顺序，以及内部表达式的求值顺序的，所以可能的执行顺序如下：

new Lhs("foo"))

new Rhs("bar"))

std::shared_ptr

std::shared_ptr

假设在第2步的时候，抛出了一个异常（比如out of memory，总之，Rhs的构造函数异常了），那么第一步申请的Lhs对象内存泄露了。这个问题的核心在于，shared_ptr没有立即获得裸指针。

我们可以用如下方式来修复这个问题：

#+begin_src C
auto lhs = std::shared_ptr<Lhs>(new Lhs("foo"));

auto rhs = std::shared_ptr<Rhs>(new Rhs("bar"));

F(lhs, rhs);
#+end_src
当然，推荐的做法是使用std::make_shared来代替：

F(std::make_shared<Lhs>("foo"), std::make_shared<Rhs>("bar"));

当std::make_shared被调用，指向动态内存对象的原始指针会被安全的保存在返回的std::shared_ptr对象中，然后另一std::make_shared被调用。如果此时产生了异常，那std::shared_ptr析构会知道于是它所拥有的对象会被销毁。

使用std::make_unique来代替new在写异常安全的代码里和使用std::make_shared一样重要。

** make函数的不足

make函数都不允许使用定制删除器，但是std::unique_ptr和std::shared_ptr的构造函数都可以。

*** make函数不能完美传递一个initializer_list。 

替代方案：

#+begin_src C
// initializer_list<int> aa = {1,2,3}; // 或者

auto aa = {1,2,3};

auto a = make_shared<vector<int>>(aa);

// auto b = make_shared<vector<int>>({1,2,3}); // 错误
#+end_src
*** 对象的内存可能无法及时回收

虽然使用std::make_shared可以减少了内存分配的次数，提高效率，但由于控制块与对象都在同一块动态分配的内存上，所以当对象的引用计数变为0，对象被销毁（析构函数被调）后，该对象所占内存仍未释放，直到控制块同样也被销毁，内存才会释放。

我们知道，在控制块中包含两个计数：shared count和weak count，分别表示std::shared_ptr和std::weak_ptr对对象的引用计数，只有当shared count和weak count都为0时，控制块才会被销毁。

换句话说，只要有std::weak_ptr指向一个控制块（weak count大于0），那控制块就一定存在。只要控制块存在，包含它的内存必定存在。通过std::shared_ptr的make函数分配的内存在最后一个std::shared_ptr和最后一个std::weak_ptr被销毁前不能被释放。

** 构造函数是保护或私有时，无法使用make_shared。 

替代方案：

#+begin_src C
class A {

public:

  static std::shared_ptr<A> create() {

  return std::make_shared<A>();

 }

protected:

  A() {}

  A(const A &) = delete;

  const A &operator=(const A &) = delete;

};

std::shared_ptr<A> foo() {

  return A::create();

}
#+end_src

作者：SigalHu

来源：CSDN 

原文：https://blog.csdn.net/u011475134/article/details/76714243 

版权声明：本文为博主原创文章，转载请附上博文链接！

refer： [[https://stackoverflow.com/questions/12030650/when-is-stdweak-ptr-useful][When is std::weak_ptr useful?]]

* When weakptr useful

use_countrefer: [[https://stackoverflow.com/questions/12030650/when-is-stdweak-ptr-useful][When is std::weak_ptr useful?]]

** weak_ptr可以判断游荡的指针是否可用。

#+begin_quote
std::weak_ptr is a very good way to solve the [[https://en.wikipedia.org/wiki/Dangling_pointer][dangling pointer]] problem.
By just using raw pointers it is impossible to know if the
referenced data has been deallocated or not. Instead, by letting a
std::shared_ptr manage the data, and supplying std::weak_ptr to users of
the data, the users can check validity of the data by calling expired()
or lock().
#+end_quote

应用场景：

- cache objects. 可以用weak ptr
  保存这些objects，看看他们谁还在用，谁已经无效了。当然这种情况用shared_ptr的use_count判断为1也可以。The
  cache use case could work with a shared reference if the cache was
  able to test if the refcount is 1, thus knowing it has the only
  reference and it could release it reclaiming on demand. This would
  eliminate the need for weak references in this case.

- 交叉引用问题。

Suppose you have Team and Member objects.

Obviously it's a relationship : the Team object will have pointers to
its Members. And it's likely that the members will also have a back
pointer to their Team object.

Then you have a dependency cycle. If you use shared_ptr, objects will no
longer be automatically freed when you abandon reference on them,
because they reference each other in a cyclic way. This is a memory
leak.

You break this by using weak_ptr. The "owner" typically use shared_ptr
and the "owned" use a weak_ptr to its parent, and convert it temporarily
to shared_ptr when it needs access to its parent.

Store a weak ptr :

weak_ptr<Parent> parentWeakPtr_ = parentSharedPtr; // automatic
conversion to weak from shared

then use it when needed

shared_ptr<Parent> tempParentSharedPtr = parentWeakPtr_.lock(); // on
the stack, from the weak ptr

if( not tempParentSharedPtr ) {  // yes it may failed if parent was
freed since we stored weak_ptr

} else {  // do stuff

}// tempParentSharedPtr is released when it goes out of scope

- 管理进程std::shared_ptr<Task>给subtask周期分配任务，std::vector<std::weak_ptr<Task>>。用timer查看std::weak_ptr<Task>是否还存在。Suppose
  you have a collection of tasks, executed asynchronously, and managed
  by an std::shared_ptr<Task>. You may want to do something with those
  tasks periodically, so a timer event may traverse a
  std::vector<std::weak_ptr<Task>> and give the tasks something to do.
  However, simultaneously a task may have concurrently decided that it
  is no longer needed and die. The timer can thus check whether the task
  is still alive by making a shared pointer from the weak pointer and
  using that shared pointer, provided it isn't null.

* 明白了就看看这个 is_base_of
#+begin_src C
  namespace details {
    template<typename Base> std::true_type  is_base_of_test_func(const volatile Base*);
    template<typename Base> std::false_type is_base_of_test_func(const volatile void*);
    template<typename Base, typename Derived>
      using pre_is_base_of = decltype(is_base_of_test_func<Base>(std::declval<Derived*>()));

    template<typename Base, typename Derived>
      using pre_is_base_of2 =
      std::experimental::detected_or_t<std::true_type, pre_is_base_of, Base, Derived>;
    template<typename Base, typename Derived, typename = void>
      struct pre_is_base_of2 : public std::true_type {};
    template<typename Base, typename Derived>
      struct pre_is_base_of2<Base, Derived, std::void_t<pre_is_base_of<Base, Derived>>>
      : public pre_is_base_of<Base, Derived> {};
  }   // namespace details
  template<typename Base, typename Derived>
    struct is_base_of
    : public std::conditional_t<std::is_class<Base>::value && std::is_class<Derived>::value,
    details::pre_is_base_of2<Base, Derived>, std::false_type> {};
  
#+end_src

[[https://stackoverflow.com/questions/27687389/how-does-void-t-work]]

has_member< A >::value 首先找到的是主定义has_member< A, void >

#+begin_src C
  template< class , class = void >

  struct has_member : std::false_type{ };
#+end_src

然后呢找特化：

#+begin_src C
  template< class T >
  struct has_member< T , void_t< decltype( T::member ) > > :
  std::true_type{ };
#+end_src

所以这个特化必须匹配has_member< A, void >， 所以要用void_t
