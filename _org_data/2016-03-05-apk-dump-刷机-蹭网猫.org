#+options: toc:1 ^:nil
#+begin_export md
---
layout: post
title: "Apk Dump 刷机-蹭网猫"
date: 2016-03-05
tags: 
    - it
---
#+end_export

* dump apk

首先得配好java环境， [[https://www.cnblogs.com/guxiaobei/p/8556586.html]]

#+begin_src sh
  apt-get install default-jre
  apt-get install default-jdk

  #去Oracle官方网站下载并安装JDK https://www.oracle.com/technetwork/java/javase/downloads
  # JDK必须是1.7版本 [[https://www.52pojie.cn/thread-844248-1-1.html]]
  # 是的，如果用jdk11.0，androidkiller编译后安装不上。

#+end_src
** 配置环境变量 

  CLASSPATH -> .;"JAVA_HOME"/lib/dt.jar;"JAVA_HOME"/lib/tools.jar
  （应该是 .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar ？）
  JAVA_HOME  ->  C:\Program Files\Java\jdk1.7.0_80
  PATH -> "JAVA_HOME"/bin;"JAVA_HOME"/lib/tools.jar;

[[https://www.cnblogs.com/echomyecho/p/3334617.html]]

  "classpath"，设置java各个类的路径，".;%java_home%\lib;%java_home%\lib\tools.jar"。前面的”.”不可少，它代表了我们为自己的java类建立的工作路径，其它的是jdk自带的标准类库路径。

  CLASSPATH的设定，对JAVA的初学者而言是一件棘手的事。所以Sun让JAVA2的JDK更聪明一些。你会发现，在你安装之后，即使完全没有设定CLASSPATH，你仍然能够编译基本的JAVA程序，并且加以执行。

  JAVA_HOME  D:\java\jdk1.6.0_32 (JDK安装目录)

  双击系统变量中的Path选项, *C:\Program Files\*Java\jdk1.8.0_131\bin

  java -version 

** [[https://www.cnblogs.com/JhonKing/p/5106141.html][apk反编译与破解]]

[[https://www.cnblogs.com/JhonKing/p/5106141.html]]

#+begin_quote
  java  -jar apktool.jar d  -f test.apk
  java -jar apktool_2.3.4.jar d 来电语音报号.apk -o dump-apk
#+end_quote

  smali 就是java代码了类似于汇编

  *得到java源码*

  自行解压原apk文件，得到其中的classes.dex 文件

  使用dex2jar反编译apk得到Java源代码 [[https://blog.csdn.net/s13383754499/article/details/78914592]]

  E:\phone-刷机\dump-apk>..\dex2jar-2.0\d2j-dex2jar.bat classes.dex

  然后再用jd_gui工具打开这个jar文件就可以看到java源代码了 

  jd_gui 要求 jre 1.7.0, 自动安装 jre 1.8.0_191

  IDA Pro 7.0 绿色版 [[https://www.52pojie.cn/thread-675251-1-1.html]]

  [[https://down.52pojie.cn/Tools/Disassemblers/IDA_Pro_v7.0_Portable.zip][IDA_Pro_v7.0_Portable]] （Windows绿色版）

  [[https://down.52pojie.cn/Tools/Disassemblers/IDA_Pro_v7.0_and_Hex-Rays_Decompiler_(ARMx64,ARM,x64,x86).zip][IDA_Pro_v7.0_and_Hex-Rays_Decompiler_(ARMx64,ARM,x64,x86).zip]] （Windows原版）

  还多包涵了SDK等文件，名字：ida_plugin.zip）

  [[https://pan.baidu.com/s/1c3R6iZY#list/path=%2F%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E8%AE%BA%E5%9D%9B%2FIDA%207.0&parentPath=%2F%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E8%AE%BA%E5%9D%9B]]

  [[https://www.jianshu.com/p/350d32ef95de][使用IDA调试SO脱壳，环境准备及各步骤原理详解 (android_server的文件]]) 

  adb shell am start -D -n
  longbin.helloworld/longbin.helloworld.SplashActivit

** xposed 脱壳

  可以尝试 用xposed
  脱壳, [[https://www.cnblogs.com/QUSIR/p/6912032.html][xposed各种机型安装方法]]，[[https://www.cnblogs.com/QUSIR/p/6912032.html]]

  但是 从0.6.8 VirtualXposed 不再支持 Android 5.0 以下的系统 [[https://vxposed.com/download.html][https://vxposed.com/download.html]]
  可以创建一个android虚拟机？用虚拟机的话，arch必须是 x86.

  一个xposed模块写法： [[https://www.jianshu.com/p/5cc402b67aaa]]

  记一次APP脱壳重打包过程 [[https://blog.csdn.net/weixin_41508948/article/details/84543381]] 做个虚拟机脱

  Android APK脱壳--腾讯乐固、360加固一键脱壳 [[https://blog.csdn.net/weixin_41508948/article/details/84835582][https://blog.csdn.net/weixin_41508948/article/details/84835582]]

** 脱壳工具FDex2
[[https://www.52pojie.cn/forum.php?mod=viewthread&tid=812082][记一个福利播放器的脱壳和修复 ]]
  
** 安装DumpDex

  反编译之脱去乐固加固的壳 [[https://blog.csdn.net/fnhfire_7030/article/details/84395426]]

  5分钟学会基于Xposed+DumpDex的apk快速脱壳方法 [[https://www.jianshu.com/p/9d988bdddb3d]] (安装DumpDex)

  Android studio编译没有activity或没有default activity的应用 [[https://blog.csdn.net/anhenzhufeng/article/details/77561482]]

  目录中不能包含中文。E:\phone-刷机\Apps\dumpDex-develop 是不行的。

  "No toolchains found in the NDK toolchains folder for ABI with prefix:
  mips64el-linux-android"错误 [[https://blog.csdn.net/vocanicy/article/details/83004626]]

  经过对新版NDK的研究，发现NDK的更新记录里有一段话
  
  This version of the NDK is incompatible with the Android Gradle
  plugin
    version 3.0 or older. If you see an error like
   `No toolchains found in the NDK toolchains folder for ABI with
  prefix: mips64el-linux-android`,
    update your project file to [use plugin version 3.1 or newer]. You
  will also
    need to upgrade to Android Studio 3.1 or newer.
  
  也就是说新版本的NDK与3.0及以前旧版的Android Gradle plugin插件不兼容
  
  其实解决方法很简单，就是修改build.gradle中的红字部分，改为3.1以上版本即可
  
  dependencies {
    classpath 'com.android.tools.build:gradle:*3.2.0*'
  
   // NOTE: Do not place your application dependencies here; they
  belong
   // in the individual module build.gradle files
  }
  找不到asm/types.h文件，同样，在CMakeLists.txt文件里加上一句话 [[https://blog.csdn.net/qq_37475168/article/details/80369527]] 

  set(CMAKE_C_FLAGS
  "-isystem /Users/songzeceng/Library/Android/sdk/ndk-bundle/sysroot/usr/include/arm-linux-androideabi")

  我 set(CMAKE_CXX_FLAGS "$ENV{CXXFLAGS} -isystem
  c:/Users/Lenovo/AppData/Local/Android/sdk/ndk-bundle/sysroot/usr/include/arm-linux-androideabi") 不过限制32位后，不要这个没问题。

  编译64位时出错，限制ndk只编译32位。

  把 ndk 放在 defaultConfig 里面,your module-level build.gradle file
  
  defaultConfig {
  .....
  ndk {

    abiFilters "armeabi-v7a"
  }
  .....
  }

  用x86编不过。

  产生一个key文件 [[https://blog.csdn.net/cgt_cgt/article/details/78958384][Android通过命令行签名APK]]

  keytool -genkey -alias dumpdex.keystore -keyalg RSA -validity 20000
  -keystore dumpdex.keystore

  keytool -importkeystore -srckeystore dumpdex.keystore -destkeystore
  dumpdex.keystore -deststoretype pkcs12

  实际上在Run Configeration
  里直接配，填4项值： [[https://blog.csdn.net/u014005316/article/details/55802650][Gradle打包：Keystore
  not found for signing config]]

   //添加签名文件配置 app/build.gradle
    signingConfigs {
    mysigns {
    keyAlias 'zjandroid'
    keyPassword '123456'
    storeFile file('zhoujian.jks')
    storePassword '123456'
   }
   }

   路径错了！ storeFile
  file('zhoujian.jks')要写成完整的路径 
  最后输出 ./app/build/outputs/apk/debug/app-debug.apk
   
Bugly干货分享】手把手教你逆向分析 Android
程序 [[https://blog.csdn.net/Tencent_Bugly/article/details/51424209]] (签名)

Android逆向之旅---破解某应用加密算法(动态调试so和hook
so代码 [[https://www.52pojie.cn/thread-839971-1-1.html]]

** 逍遥安卓模拟器

  逍遥安卓模拟器---Android7.1.2内核 测试版 [[https://www.xyaz.cn/thread-365141-1-1.html]]

  这个安装有问题，完成不了。 从 [[https://www.memuplay.com/][https://www.memuplay.com/ 下载可以装，但是咋停止在核对信息上?]]

  下载”[[https://app.mi.com/detail/214][终端模拟器]]”

  打开终端模拟器，键入”su”

  键入”setenforce permissive”回车即可解决Google Play 一直显示核对信息

  CPU要支持虚拟化技术 主板开启VT 关闭Hyper-V 显卡驱动正确 完整系统

  [[https://blog.csdn.net/qq_15228737/article/details/81142905][ADB命令连接逍遥模拟器]] 逍遥模拟器安装目录（MEmu文件夹下），如：D:\Program
  Files\Microvirt\MEmu  (其他adb目录也可以）。

  .\adb connect 127.0.0.1:21503

  .\adb devices

  List of devices attached
  127.0.0.1:21503 device

  OK，连接成功

  [[https://www.cnblogs.com/gis-flying/p/7146126.html][Android Studio
  使用逍遥模拟器调试]]

  主要是在逍遥模拟器安装目录 adb start-server

  在msl里执行 adb connect 127.0.0.1:21503 也可以 

** 说ZJDROID脱壳

  说ZJDROID脱壳 [[https://github.com/KB5201314/ZjDroid][凑齐了ZjDroid的源码]] 
  [[https://github.com/KB5201314/ZjDroid][https://github.com/KB5201314/ZjDroid/releases]]

  第一次ZjDroid脱壳实战 [[https://blog.csdn.net/u010746456/article/details/80150250]]

  一样的文章： [[https://www.52pojie.cn/thread-736682-1-1.html]]

  [[https://www.cnblogs.com/goodhacker/p/3961045.html][ZjDroid工具介绍及脱壳详细示例]]

  1#  adb logcat -s com.flyersoft.seekbooks  啥也看不出来。

  pid 是用 2# ps 看到的。

  1# adb logcat -s zjdroid-shell-com.flyersoft.seekbooks
  [[https://www.cnblogs.com/goodhacker/p/3961045.html][可以看到！]] [[https://www.cnblogs.com/goodhacker/p/3961045.html][pid = 11811]]

  2# adb shell

  2# am broadcast -a com.zjdroid.invoke --ei target 9757--es cmd
  '{action:dump_dexinfo}'

  2#am broadcast -a com.zjdroid.invoke --ei target 9757 --es cmd
  '{"action":"dump_dexfile","dexpath":"/data/app/com.flyersoft.seekbooks/base.apk"}'*
  *
   
** Refer:

  [[https://www.jianshu.com/p/cf30221e4768][安卓脱壳-虚拟机]]

  [[https://www.jianshu.com/p/f583358afaf5][Android加壳脱壳]] (动态调试对 linker 和 libdvm.so 下断点,脱壳脚本)

  [[https://www.jianshu.com/p/b20ff2ea37f4][Android 各种脱壳工具使用]]

  [[https://www.jianshu.com/p/8a4e5da08fcb][Android_APK 之使用IDA脱壳环境搭建]]

  [[https://www.jianshu.com/p/5d701fd5bf92][ 记一次APP脱壳重打包过程]]

  [[https://www.jianshu.com/p/1f977cfbd05f][Android安全の脱壳 drizzleDumper,没有用 xposed]]

  [[https://www.jianshu.com/p/92f4a91b9fd2][通过逆向快速开发一个Android APP]]

  [[https://www.jianshu.com/p/a1e545414705][Android逆向分析概述]]

  [[https://www.jianshu.com/p/a869be38d7c0][金蝉脱壳-乐固2.8]]

  [[https://bbs.pediy.com/thread-210275.htm][360加固成功脱壳]] (dex2oat.zip)
   
  [[https://blog.csdn.net/qq_32400847/article/details/77823623][乐固加固脱壳过程]] 
  com.tencent.StubShell.TxAppEntry是恶意APP的入口 clone: 
   
  [[https://www.fortinet.com/blog/threat-research/unmasking-android-malware-a-deep-dive-into-a-new-rootnik-variant-part-i.html?noTracking][Unmasking Android Malware]] 
   
  [[https://www.mamicode.com/info-detail-2237108.html][乐固壳分析]] 

linux下使用SP_Flash_tool刷机 [[https://blog.csdn.net/alvin08/article/details/52118396]]

[[https://www.needrom.com/download/how-to-setup-sp-flash-tool-linux-mtk/]]

 来电语音报号.apk
[[https://www.52pojie.cn/forum.php?mod=viewthread&tid=346441]]

[[https://pan.baidu.com/s/1gdKmRkB]]

安装报告有毒，更改浏览器 页面。危害比较小。

* 刷机

** 大神X7三个版本如何选择？

答：大神X7移动4G、双4G和全网通4G版三个版本售价分别为1599元、1699元和1999元，如果预算有限又是移动4G用户当然是选择移动4G版，但我们更推荐购买双4G版，能支持移动和联通的3G/4G网络，更可以自由切换，如果你是电信用户或者追求更好性能就选择大神X7全网通版。

大神X7三版本区别 [[https://www.pc841.com/shoujizhishi/40711.html]]

大神X7全网通版 CPU型号 2.3Ghz高通801四核

酷派大神X7全网通版（8691-00） [[https://blog.csdn.net/xmdxcsj/article/details/47122807]]

酷派大神X7双4G 8690手机 固件版本：4.4.072.P1.150615.8690

酷派大神X7双4G 8690手机 安卓版本：Android 4.4.2

大神X7+双网通+官方精简卡刷包.zip: [[https://pan.baidu.com/s/1c2h67SW]]

 酷派大神X7双网通版8690原厂CPB线刷救砖资料 版本4.4.060.P1.150323.8690
[[https://www.yzmg.com/rom/show-htm-itemid-30388.html]]

酷派升级助手[[https://www.cnroms.com/coolpad-download-assistant.html]] 现在的酷派众多旗舰机型都是对Bootloader 加了锁，所以我们只能通过CDA 线刷

Coolpad Download Assistant Setup: [[https://pan.baidu.com/s/1kUSrmv1]]

派官方CPB格式刷机包解包与打包工具 [[https://www.jkmeng.cn/thread-26-1-1.html?_dsign=d104c87f]]

[[https://www.cnblogs.com/scue/p/3378626.html][酷派手机固件.cpb文件的分解程序
]]

cpb格式刷机包解包 [[https://www.miui.com/thread-2245446-1-1.html]] 
YGDP登录密码：369

酷派_YGPB.zip [[https://pan.baidu.com/s/1pJuQCFx]]

[[https://www.yzmg.com/news/show-15414.html][手把手教你改酷派官方ROM，酷派cpb格式刷机包 ]]

旧版本下载地址（和上面一样！）：[[https://pan.baidu.com/s/1pJuQCFx][https://pan.baidu.com/s/1pJuQCFx]]
新版本下载地址：  [[https://pan.baidu.com/s/1pK9Jo1P]]

综上可见 刷机包 中.p1 是双4G 双网通版， .p0 是移动版。

 酷派8690_T00(大神X7 移动4G版)

酷派大神X7移动版怎么进入Recovery模式 [[https://ask.07swz.com/q/6457514.html]]

酷派大神X7卡刷刷机教程 [[https://www.liqucn.com/article/1020755.shtml]]

酷派大神X7移动版8690-T00原厂CPB线刷救砖资料 版本4.4.042.P0.150323.8690_T00
 [[https://www.yzmg.com/rom/show-htm-itemid-30435.html]]

4.4.070.P0.150703.8690_T00.CPB
 [[https://www.sosuopan.com/file/47382401]]

酷派 大神X7(移动4G) [[https://www.romjd.com/Device/coolpad-8690t00]]

酷派大神x7手机不断重启:

[[https://tieba.baidu.com/p/5377125514?red_tag=3582011961]]

 电池的问题，把电池拆开，里面有一个1206封装的可恢复保险丝的内阻偏大，导致开机电流被限制，无法正常启动。把那个可恢复保险丝直接短接或换一个新的，重新包好，上电立马可以开机了。

 酷派大神X7拆机图解 [[https://www.pc841.com/shoujizhishi/41384.html]]

B8000
[[https://www.baidu.com/link?url=kQcgBmVPPaXzWyZCA9q6MGXJq9piHFYm75_l5EpoBb7alK0-sW3_xx8CE-NHYGtGmV7wmEkjOPLmXqxCSDLrs5Gq4ch7kfN1RPXUcadh7Lm&wd=&eqid=ef7d026c0007d500000000025c19e7e3][MTK工程模式简单写入IMEI]]

MTK  adb
进入工程模式 [[https://blog.csdn.net/johnyuan1988/article/details/17348425]]

#+begin_src shell
  adb shell am start -n com.mediatek.engineermode/.EngineerMode
#+end_src

直接从手机工程模式就能写入 [[https://tieba.baidu.com/p/2954661929?red_tag=3220956147]]

 将system image所在的分区(/dev/block/by-name/system)通过adb forward命令forward出来：[[https://blog.csdn.net/omnispace/article/details/80018705][超级好用的ADB FORWARD命令]]

#+begin_quote
  adb forward --remove-all
  adb forward tcp:8424 dev:/dev/block/by-name/system
#+end_quote

将分区中的内容给读取出来:

#+begin_quote
  nc 127.0.0.1 8424 > system.bin
#+end_quote

- EMUI3.0
  Android4.4.4以下完美ROOT教程 [[https://club.huawei.com/thread-3610674-1-1.html]]

- 手把手教大家自己制作中意的ROM卡刷包 [[https://cn.club.vmall.com/thread-3588025-1-1.html]]

- 华为解锁刷机root教程详解 [[https://blog.csdn.net/lusongno1/article/details/52315827]]

绕开华为通道，获取解锁码解锁BootLoader
[[https://www.52pojie.cn/forum.php?mod=viewthread&tid=816065]]

获取华为解锁码的思路 [[https://blog.csdn.net/autohacker/article/details/50715639]]

[[https://www.52pojie.cn/forum.php?mod=viewthread&tid=787009][ Android BusyBox Pro v68]]

- [[https://www.miui.com/thread-3704773-1-1.html][Andorid Tools--强大的Apk反编译,Rom提取工具,从此告别枯燥的命令]]

https://www.miui.com/thread-3704773-1-1.html

需要一个root shell超级adbd  MTKdroidtool
才能工作 ： [[https://www.muzisoft.com/shuaji/78774.html][MtkDroidTools提取线刷包使用教程 
https://www.muzisoft.com/shuaji/78774.html]]

还可以生成 TWRP recovery .

 mt6571 高仿iphone6s: 

- TWRP官方APP发布下载

https://pcedu.pconline.com.cn/969/9697486.html

https://pcedu.pconline.com.cn/867/8678765.html

通过应用宝 下载
[[https://dl.pconline.com.cn/download/510878.html][Official TWRP App
并安装
]]

- [[https://dl.pconline.com.cn/download/510878.html][手动移植recovery工具]]

[[https://dl.pconline.com.cn/download/510878.html][https://tieba.baidu.com/p/3537800828?red_tag=0759598611
]]

[[https://dl.pconline.com.cn/download/510878.html][
]]

- 使用mount修改你的android中/system为只读权限

https://blog.sina.com.cn/s/blog_5842daa30101eeke.html

更改/system 权限。

mount -wo remount rootfs /

mount -o remount,ro /dev/block/mtdblock0/system 

* img2simg

[[https://github.com/dlenski/PySIMG]]

#+begin_src shell
  python setup.py install --record log
  cat log ｜ xagrs rm －rf  
  /usr/local/bin/img2simg system-raw.img -o system-new.img
#+end_src

android 在线code [[https://www.androidos.net.cn/android/7.0.0_r31/xref/system/core/libsparse]]

[Tool] SparseConverter v1.0.1 [[https://forum.xda-developers.com/showthread.php?t=2749797][https://...]] https://github.com/dlenski/PySIMG]]

#+begin_src shell
  ./SparseConverter /decompress userdata.img u-raw.img
  ./SparseConverter  /compress u-raw.img  ./  300MB
#+end_src

*Android ext4 system.img unpack repack* [[https://blog.djodjo.org/?p=98]]

[[https://github.com/dlenski/PySIMG][自己]]编译 make_ext4fs [[https://stackoverflow.com/questions/26589111/unpack-repack-android-img-with-ubuntu-simg2img-make-ext4fs]]

- How to pack and unpack system.img and userdata.img from an Android factory image
  [[https://muzso.hu/2012/08/10/how-to-pack-and-unpack-system.img-and-userdata.img-from-an-android-factory-image]]

Unpack/repack ext4 Android system images
[[https://www.xuebuyuan.com/2169973.html]]

ext4_unpacker.zip
[[https://pan.baidu.com/share/link?uk=2922523022&shareid=2051109980]]

 [[https://www.cr173.com/soft/101123.html]]

#+begin_src shell
  sudo apt-get install git zlib1g-dev gcc make libpcre3-dev
  
  URL="https://android.googlesource.com/platform/system/core"
  git clone --depth 1 "$URL" "$(basename $URL)"
  URL="https://android.googlesource.com/platform/system/extras"
  git clone --depth 1 "$URL" "$(basename $URL)"
  URL="https://android.googlesource.com/platform/external/libselinux"
  git clone --depth 1 "$URL" "$(basename $URL)"
  git clone "extras" "extras-build"
  cd "extras-build/ext4_utils"
  
  gcc  -Wall \
   -o make_ext4fs \
   -I$DIR/core/include -DANDROID \
   -DHAVE_ANDROID_OS -DHOST \
   -I$DIR/core/libsparse/include \
   -I$DIR/libselinux/include \
    make_ext4fs_main.c \
    make_ext4fs.c \
    ext4fixup.c \
    ext4_utils.c \
    allocate.c \
    contents.c \
    extent.c \
    indirect.c \
    uuid.c \
    sha1.c \
    wipe.c \
    crc16.c \
    ext4_sb.c \
   $DIR/core/libsparse/backed_block.c \
   $DIR/core/libsparse/output_file.c \
   $DIR/core/libsparse/sparse.c \
   $DIR/core/libsparse/sparse_crc32.c \
   $DIR/core/libsparse/sparse_err.c \
   $DIR/core/libsparse/sparse_read.c \
   $DIR/libselinux/src/callbacks.c \
   $DIR/libselinux/src/check_context.c \
   $DIR/libselinux/src/freecon.c \
   $DIR/libselinux/src/init.c \
   $DIR/libselinux/src/label.c \
   $DIR/libselinux/src/label_android_property.c \
   $DIR/libselinux/src/label_file.c\
   -lz \
   -lpcre
#+end_src
 

* elf-修复
[[https://bbs.pediy.com/thread-194053.htm][ 从零打造简单的SODUMP工具]]

[[https://bbs.pediy.com/thread-192874.htm][ELF section修复的一些思考]]

[[https://blog.csdn.net/happyguys12345/article/details/71170080][ARM平台下elf文件超详细的分析与解读]]

[[https://blog.csdn.net/t396602425/article/details/70877361][简单SO加密及ELF头文件]]   工具
010Editor, ELF Template. 360crackme.rar
[[https://bbs.pediy.com/thread-188793.htm][360无线攻防第三题详细分析]]  

[[https://www.219.me/posts/2855.html][010Editor Template 下载地址集合 ]]

[[https://blog.csdn.net/kibaamor/article/details/11213823][一个简单的elf文件头查看工具]]

[[https://blog.csdn.net/helloworld_ptt/article/details/79575783][Windows下的ELF文件解析代码C++]]

* 蹭网猫

B8000：
#+begin_src shell
echo "start set usb-ether..."
setprop sys.usb.config rndis
sleep 1
ifconfig rndis0 10.9.8.1 netmask 255.255.255.0 up
sleep 1
echo 1 > /proc/sys/net/ipv4/ip_forward
sleep 1
iptables -P FORWARD ACCEPT
iptables -A FORWARD -i usb0 -o wlan0 -j ACCEPT
iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
echo "finish setting"

#+end_src

HTC:
#+begin_src shell
echo "start set usb-ether..."
echo 1 > /sys/class/android_usb/f_rndis/on
sleep 1
ifconfig usb0 10.9.9.1 netmask 255.255.255.0 up
sleep 1
echo 1 > /proc/sys/net/ipv4/ip_forward
sleep 1
iptables -P FORWARD ACCEPT
iptables -A FORWARD -i usb0 -o wlan0 -j ACCEPT
iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
echo "finish setting"

#+end_src
cwm.sh，busybox设置root执行。

#!/system/bin/sh

#su  #刷机大师的su不太对劲，这里调用会死。

echo start cwm

/system/bin/sh /data/app/igo  #直接运行不行，加不上x位。

echo done
